import java.util.Arrays;

public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
		int n=denominations.length;	
		long dp[][] = new long[n][value+1];
		for(long[] rows: dp){
			Arrays.fill(rows, -1);
		}

		return f(0,value, denominations,n,dp);
	}

	public static long f(int i, int target, int[] arr, int n, long[][] dp){
		if(i == n-1){
			if(target%arr[n-1] == 0) return 1;
			else return 0;
		}

		if(dp[i][target] != -1) return dp[i][target]; 

		long notTake = f(i+1, target, arr,n,dp);
		long take = 0;
		if(arr[i]<=target){
			take = f(i,target-arr[i],arr,n,dp);
		}
		dp[i][target] =  take+notTake;

		return dp[i][target];
	}
	
}
